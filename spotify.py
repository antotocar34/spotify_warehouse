# -*- coding: utf-8 -*-
"""spotify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-aM_5k6G4kUQ7dNYQLxcSFbfNRkueSFE
"""

# load the playlist data set with 500 playlists and 20.000 unique songs
import csv
data=pd.read_csv('/home/leon/spotify_warehouse/data/cleaned_playlist_data.csv')

data.shape

#install secret keys

import os
os.environ['SPOTIPY_CLIENT_ID'] = 'f85dc73d8ec843fcab3b1e98eb725152'
os.environ['SPOTIPY_CLIENT_SECRET']='7e4d577fedde447a8a9885e57ea28953'

#install spotipy and get authorization
!pip install spotipy
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials


auth_manager = SpotifyClientCredentials()
sp = spotipy.Spotify(auth_manager=auth_manager)

#check out the data
data.head()

#get track, artists and album identifiers 
tracks=data['track_uri']
artists=data['artist_uri']
albums=data['album_uri']

#get audio features from all the unique songs in the data set 
audio_features={}
!pip install retry
from retry import retry

def audio_retrier():
  condition = False
  audio_features = {}
  i=0
  while not condition:
    audio_features, i, boolean = get_audio_features(audio_features, i)
    condition = boolean
  return audio_features


def get_audio_features(audio_features, i):
    try:
      for j, song in enumerate(tracks[i:]):
        if not audio_features.get(song):
          audio_features[song] = sp.audio_features(song)
          print(len(audio_features)) 
      return audio_features, None, True
    except:
      return audio_features, i + j + 1, False   

output = audio_retrier()

#parse the dictionary to a dataframe
audio_features=pd.concat({k: pd.DataFrame(v) for k, v in output.items()}, axis=0)
audio_features=audio_features.reset_index().drop(['level_1', 'uri'],axis=1)

#inspect the data
audio_features.columns.values[0]='song_uri' 
audio_features.head()

#create a csv of the dataframe
audio_features.to_csv('audio_features.csv')

#the following chunk of code extracts the 10 top tracks for each artist in the playlist data set
tracklist = []
for artist in artists:
    results=sp.artist_top_tracks(artist)
    for track in results['tracks']:
      temp_dict = {'artist':artist,'artist_name':track['artists'][0]['name'], 'duration_ms' : track["duration_ms"], 'explicit' : track['explicit'],'track_name':track['name'],'popularity':track['popularity']}
      tracklist.append(temp_dict)

# parse top_tracks and create csv
top_tracks=pd.DataFrame(tracklist)
top_tracks.to_csv('toptracks.csv')

toptracks=pd.DataFrame(tracklist)['track_uri']

#obtain the audio features of ech top track
def audio_retrier():
  condition = False
  audio_features = {}
  i=0
  while not condition:
    audio_features, i, boolean = get_audio_features(audio_features, i)
    condition = boolean
  return audio_features


def get_audio_features(audio_features, i):
    try:
      for j, song in enumerate(toptracks[i:]):
        if not audio_features.get(song):
          audio_features[song] = sp.audio_features(song)
          print(len(audio_features)) 
      return audio_features, None, True
    except:
      return audio_features, i + j + 1, False   

output = audio_retrier()

#parse and convert the audio features of the top tracks to csv
audio_features_top=pd.DataFrame(output)
audio_features_top.to_csv('audio_features_top.csv')

# the following code extracts the 20 similar artist for each artist in the data set. We ended up not using this data set
similar_artist=[]
for artist_id in artists[1:500]:
  if artist_id not in similar_artist['base_artist']
    results=sp.artist_related_artists(artist_id)
    for artist in results['artists']:
      temp_dict = {'base_artist':artist_id,'similar_artist_name':artist['name'], 'uri' : artist["uri"], 'popularity':artist['popularity']}
      similar_artist.append(temp_dict)

#parse and create csv
similar_artist=pd.DataFrame(similar_artist)
similar_artist.to_csv('similar_artists.csv')